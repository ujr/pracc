head	1.7;
access;
symbols;
locks
	ujr:1.7; strict;
comment	@ * @;


1.7
date	2008.02.06.21.48.10;	author ujr;	state Exp;
branches;
next	1.6;

1.6
date	2008.01.30.17.19.48;	author ujr;	state Exp;
branches;
next	1.5;

1.5
date	2007.12.27.13.50.09;	author ujr;	state Exp;
branches;
next	1.4;

1.4
date	2007.12.27.13.49.10;	author ujr;	state Exp;
branches;
next	1.3;

1.3
date	2007.12.14.09.02.46;	author ujr;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.05.17.19.51;	author ujr;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.15.20.59.13;	author ujr;	state Exp;
branches;
next	;


desc
@Initial RCS version.
@


1.7
log
@Using new pracc API functions
@
text
@/* pracc-edit.c - part of pracc sources
 * $Id: pracc-edit.c,v 1.6 2008/01/30 17:19:48 ujr Exp ujr $
 * Copyright (c) 2005-2008 by Urs Jakob Ruetschi
 */
static char id[] = "This is pracc-edit by ujr\n$Revision: 1.6 $\n";

#include <errno.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#include "common.h"
#include "pracc.h"
#include "print.h"
#include "scan.h"
#include "streq.h"

void setaction(const char *s);
void setamount(const char *s);
void setbalance(const char *s);
void setlimit(const char *s);
void usage(const char *s);

char *me;
char *acctname;
char action; // one of: -, +, =, $, !, #
long number; // amount or balance or limit

int main(int argc, char **argv)
{
   char comment[MAXLINE];
   char *p, *endp;
   int c;

   extern int optind;
   extern int opterr;

   me = progname(argv);
   if (!me) return 127; // no arg0

   opterr = 0; // prevent stupid getopt output
   while ((c = getopt(argc, argv, "V")) > 0) switch (c) {
      case 'V': return (putln(stdout, id) == 0) ? 0 : 127;
      default: usage("invalid option");
   }
   argc -= optind;
   argv += optind;

   if (*argv) acctname = *argv++;
   else usage("account not specified");
   if (praccCheckName(acctname))
      usage("invalid account name");

   if (*argv) setaction(*argv++);
   else usage("action not specified");
   if (!praccType(action))
      usage("invalid action");

   switch (action) {
      case '-': // debit
      case '+': // credit
         if (*argv) setamount(*argv++);
         else usage("amount not specified");
         break;
      case '=': // reset
         if (*argv) setbalance(*argv++);
         else usage("balance not specified");
         break;
      case '$': // limit
         if (*argv) setlimit(*argv++);
         else usage("limit not specified");
         break;
      case '!': // error
      case '#': // note
         break;
      default: usage("invalid action");
   }

   p = comment;
   endp = comment + sizeof(comment) - 1;
   while (*argv) { // remaining args
      unsigned len = strlen(*argv);
      if (p+len > endp) break;
      if (p > comment) *p++ = ' ';
      p += prints(p, *argv++);
   }
   *p = '\0'; // terminate

/*
 * Ok, here we have set from the cmdline args:
 *   action = debit / credit / reset / limit / note
 *   number = amount / balance / limit / 0 (if note)
 *   comment[] = text for info field, NUL-terminated
 * Now use the pracc API to append this record.
 */

   if (praccAppend(acctname, action, number, 0, comment) < 0)
      die(111, "cannot write account %s", acctname);

/*
 * Build and append a line to pracc.log
 */

   p = comment;
   p += prints(p, praccType(action));
   p += printc(p, ' ');
   switch (action) {
      case '-':
      case '+':
         p += printu(p, number); // amount
         break;
      case '=':
         p += printi(p, number); // balance
         break;
      case '$':
         if (number <= UNLIMITED) *p++ = '*';
         else p += printi(p, number); // limit
         break;
      case '!':
      case '#':
         p += prints(p, "added");
         break;
   }
   *p = '\0'; // terminate

   if (praccLogup(acctname, comment) < 0)
      putfmt(stderr, "%s: cannot append to %s: %s\n",
             me, PRACCLOG, strerror(errno));

   return 0; // SUCCESS
}

void setaction(const char *s)
{
   if (streq(s, "debit")) action = '-';
   else if (streq(s, "credit")) action = '+';
   else if (streq(s, "reset")) action = '=';
   else if (streq(s, "limit")) action = '$';
   else if (streq(s, "error")) action = '!';
   else if (streq(s, "note")) action = '#';
   else usage("invalid action");
}

void setamount(const char *s)
{
   int n = scanu(s, (unsigned long *) &number);
   if (n == 0) usage("invalid amount");
}

void setbalance(const char *s)
{
   int n = scani(s, &number); // may be negative!
   if (n == 0) usage("invalid balance");
}

void setlimit(const char *s)
{
   long value;
   int n = scani(s, &value);
   if (n > 0) number = value;
   else if (streq(s, "none")) number = UNLIMITED;
   else usage("invalid limit");
}

void usage(const char *s)
{
   if (s) putfmt(stderr, "%s: %s\n", me, s);
   putfmt(stderr, "Usage: %s [-V] account action {argument}\n", me);
   putfmt(stderr, " action: debit, credit, reset, limit, error, note\n");
   exit(127); // FAILURE
}
@


1.6
log
@Changed to use the new pracc API functions
@
text
@d2 1
a2 1
 * $Id: pracc-edit.c,v 1.5 2007/12/27 13:50:09 ujr Exp ujr $
d5 1
a5 1
static char id[] = "This is pracc-edit by ujr\n$Revision: 1.5 $\n";
d14 1
a14 1
#include "basics.h"
d99 1
a99 1
   if (praccAppend(acctname, action, number, comment) < 0)
d128 1
a128 1
   if (praccLog(acctname, comment) < 0)
@


1.5
log
@*** empty log message ***
@
text
@d2 2
a3 2
 * $Id: pracc-edit.c,v 1.4 2007/12/27 13:49:10 ujr Exp ujr $
 * Copyright (c) 2005-2007 by Urs Jakob Ruetschi
d5 1
a5 1
static char id[] = "This is pracc-edit by ujr\n$Revision: 1.4 $\n";
d8 2
d14 1
a14 1
#include "open.h"
a17 2
#include "scf.h"
#include "simpleio.h"
a18 1
#include "timestamp.h"
a19 2
int addlog(void);
char *strtype(char type);
d27 2
a28 2
char *account;
char action; // one of: -, +, =, $, #
a30 4
int fd;
char buf[MAXLINE];
char *bufptr, *bufend;

d33 2
a34 2
   extern int scfidx;
   char *path;
d37 5
a41 2
   me = scfbase(argv);
   if (!me) return 127; /* no arg0 */
d43 3
a45 2
   while ((c = scfnext(argc, argv, "V")) > 0) switch (c) {
      case 'V': return (putstr(id) == 0) ? 0 : 127;
d48 2
a49 2
   argc -= scfidx;
   argv += scfidx;
d51 1
a51 1
   if (*argv) account = *argv++;
d53 1
a53 1
   if (praccname(account))
d58 2
d75 1
d81 2
a82 8
   /*
    * Gather remaining arguments for the info field.
    */

   bufptr = buf;
   bufend = buf + sizeof(buf) - 1; // reserve one byte for \0
   if (*argv && (bufptr + strlen(*argv) < bufend))
      bufptr += prints(bufptr, *argv++);
d85 3
a87 3
      if (bufptr+len > bufend) break;
      bufptr += printc(bufptr, ' ');
      bufptr += prints(bufptr, *argv++);
d89 1
a89 1
   bufptr += print0(bufptr);
d91 7
a97 18
   /*
    * Ok, here we have set from the cmdline args:
    *   action = debit / credit / reset / limit / note
    *   number = amount / balance / limit / 0 (if note)
    *   buf[] = text for info field, NUL-terminated
    * Now use the pracc API to append this record.
    */

   if (praccwrite(account, action, number, buf) < 0)
      die(111, "cannot append to %s/%s", PRACCDIR, account);

   /*
    * Append a line to pracc.log
    */

   if (addlog() < 0)
      logfmt("%s: cannot append to %s: %s\n",
         me, PRACCLOG, strerror(errno));
d99 6
a104 2
   return 0; // SUCCESS
}
d106 2
a107 17
int addlog(void)
{
   char buf[MAXLINE];
   register char *p;
   int fd, len;

   fd = open_append(PRACCLOG);
   if (fd < 0) return -1;

   p = buf;
   p += timestamp(p);
   p += prints(p, " by uid ");
   p += printu(p, getuid());
   p += prints(p, " acct ");
   p += printsn(p, account, MAXNAME);
   p += prints(p, ": ");
   p += prints(p, strtype(action));
d110 15
a124 15
   case '-':
   case '+':
      p += printu(p, number); // amount
      break;
   case '=':
      p += printi(p, number); // balance
      break;
   case '$':
      if (number <= UNLIMITED) // limit
         p += printc(p, '*');
      else p += printi(p, number);
      break;
   case '#':
      p += prints(p, "added");
      break;
d126 5
a130 1
   p += printc(p, '\n');
a131 3
   len = p - buf;
   if (write(fd, buf, len) != len) return -1;
   if (close(fd) < 0) return -1;
a134 12
char *strtype(char type)
{
   switch (type) {
      case '-': return "debit";
      case '+': return "credit";
      case '=': return "reset";
      case '$': return "limit";
      case '#': return "note";
      default:  return "other";
   }
}

d141 1
d169 3
a171 3
   if (s) logfmt("%s: %s\n", me, s);
   logfmt("Usage: %s [-V] account action {argument}\n", me);
   logline(" action: debit, credit, reset, limit, note");
@


1.4
log
@Moved common log append code to addlog() routine.
@
text
@d2 1
a2 1
 * $Id: pracc-edit.c,v 1.3 2007/12/14 09:02:46 ujr Exp ujr $
d5 1
a5 1
static char id[] = "This is pracc-edit by ujr\n$Revision: 1.3 $\n";
d48 1
a48 1
      case 'V': return (putline(id) == 0) ? 0 : 127;
@


1.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
 * $Id$
d5 1
a5 1
static char id[] = "This is pracc-edit by ujr\n$Revision$\n";
d21 1
d112 1
a112 31
   if ((fd = open_append(PRACCLOG)) < 0)
      logfmt("%s: cannot open %s: %s\n", me, PRACCLOG, strerror(errno));
   else {
      bufptr = buf;
      bufptr += timestamp(bufptr);
      bufptr += prints(bufptr, " by uid ");
      bufptr += printu(bufptr, getuid());
      bufptr += prints(bufptr, " acct ");
      bufptr += printsn(bufptr, account, MAXNAME);
      bufptr += prints(bufptr, ": ");
      bufptr += prints(bufptr, strtype(action));
      bufptr += printc(bufptr, ' ');
      switch (action) {
         case '-':
         case '+':
            bufptr += printu(bufptr, number); // amount
            break;
         case '=':
            bufptr += printi(bufptr, number); // balance
            break;
         case '$':
            if (number <= UNLIMITED) // limit
               bufptr += printc(bufptr, '*');
            else bufptr += printi(bufptr, number);
            break;
         case '#':
            bufptr += prints(bufptr, "added");
            break;
      }
      bufptr += printc(bufptr, '\n');
      if (write(fd, buf, bufptr-buf) != bufptr-buf)
d114 39
a152 1
      		me, PRACCLOG, strerror(errno));
d154 1
d156 3
d207 1
a207 1
   if (s) logline((char *) s);
d210 1
a210 1
   exit(127);
@


1.2
log
@Adapted to new pracc API
@
text
@d1 5
a5 5
/* pracc-edit.c - part of pracc sources */
/* Copyright (c) 2005 by Urs-Jakob Rueetschi */

static char id[] = "pracc-edit by ujr/2005-07-08\n";
static char RCSID[] = "$Id: pracc-edit.c,v 1.1 2005/07/15 20:59:13 ujr Exp ujr $\n";
d146 1
a146 1
   return 0; // ok
a189 1
   logfmt("setlimit: limit = %d\n", number);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* pracc-edit.c */
d5 1
a5 1
static char RCSID[] = "$Id$\n";
d8 1
d19 1
a19 1
#include "utcstamp.h"
a25 5

void die(int code, char *s1, char *s2, char *s3);
#define die1(code, s1) die(code, s1, (char *) 0, (char *) 0)
#define die2(code, s1, s2) die(code, s1, s2, (char *) 0)
#define die3(code, s1, s2, s3) die(code, s1, s2, s3)
d30 2
a31 4
char action; /* one of: -, +, =, $, # */
long amount;
long balance;
long limit;
a35 1
char stamp[UTCSTAMP];
d39 106
a144 102
  extern int scfidx;
  int c;

  me = scfbase(argv);
  if (!me) return 127; /* no arg0 */

  while ((c = scfnext(argc, argv, "V")) > 0) switch (c) {
  	case 'V': return (putline(id) == 0) ? 0 : 127;
  	default: usage("invalid option");
  }
  argc -= scfidx;
  argv += scfidx;

  if (*argv) account = *argv++;
  else usage("account not specified");
  if (*argv) setaction(*argv++);
  else usage("action not specified");

  if (chdir(PRACCDIR) != 0) die2(111, "cannot chdir to ", PRACCDIR);
  fd = open_pracc(account);
  if (fd < 0) die3(111, "cannot open ", PRACCDIR, account);

  utcstamp(stamp);

  bufptr = buf;
  bufend = buf + sizeof(buf) - 1; /* reserve one byte for \n */
  bufptr += printc(bufptr, action);
  switch (action) {
  	case '-': /* debit */
  	case '+': /* credit */
  		if (*argv) setamount(*argv++);
  		else usage("amount not specified");
  		bufptr += printu(bufptr, amount);
  		break;
  	case '=': /* reset */
  		if (*argv) setbalance(*argv++);
  		else usage("balance not specified");
  		bufptr += printi(bufptr, balance);
  		break;
  	case '$': /* limit */
  		if (*argv) setlimit(*argv++);
  		else usage("limit not specified");
  		if (limit < UNLIMITED) 
  			bufptr += printi(bufptr, limit);
  		else bufptr += printc(bufptr, '*'); /* unlimited */
  		break;
  	case '#': /* note */
  		goto nostamp;
  	default: usage("invalid action");
  }
  bufptr += printc(bufptr, ' ');
  bufptr += printsn(bufptr, stamp, UTCSTAMP);
nostamp:
  while (*argv) { /* remaining args */
  	unsigned len = strlen(*argv);
  	if (bufptr+len > bufend) break;
  	bufptr += printc(bufptr, ' ');
  	bufptr += prints(bufptr, *argv++);
  }
  bufptr += printc(bufptr, '\n');

  /* append atomically: in just one write! */
  if (write(fd, buf, bufptr-buf) != bufptr-buf)
  	die3(111, "cannot write ", PRACCDIR, account);
  if (close(fd) < 0)
  	die3(111, "cannot close ", PRACCDIR, account);

  /* append log line */
  if ((fd = open_append(PRACCLOG)) < 0)
  	logfmt("%s: cannot open %s: %s\n", me, PRACCLOG, strerror(errno));
  else {
  	bufptr = buf;
  	bufptr += printsn(bufptr, stamp, UTCSTAMP);
  	bufptr += prints(bufptr, " acct ");
  	bufptr += printsn(bufptr, account, MAXNAME);
  	bufptr += prints(bufptr, ": ");
  	bufptr += prints(bufptr, strtype(action));
  	bufptr += printc(bufptr, ' ');
  	switch (action) {
  	case '-':
  	case '+':
  		bufptr += printu(bufptr, amount);
  		break;
  	case '=':
  		bufptr += printi(bufptr, balance);
  		break;
  	case '$':
  		if (limit < UNLIMITED) 
  			bufptr += printi(bufptr, limit);
  		else bufptr += printc(bufptr, '*'); /* unlimited */
  		break;
  	case '#':
  		bufptr += prints(bufptr, "added");
  		break;
  	}
  	bufptr += prints(bufptr, " by uid ");
  	bufptr += printu(bufptr, getuid());
  	bufptr += printc(bufptr, '\n');
  	if (write(fd, buf, bufptr-buf) != bufptr-buf)
  		logfmt("%s: cannot append to %s: %s\n",
  			me, PRACCLOG, strerror(errno));
  }
d146 1
a146 1
  return 0; /* ok */
d151 8
a158 8
  switch (type) {
  	case '-': return "debit";
  	case '+': return "credit";
  	case '=': return "reset";
  	case '$': return "limit";
  	case '#': return "note";
  	default:  return "other";
  }
d163 6
a168 6
  if (streq(s, "debit")) action = '-';
  else if (streq(s, "credit")) action = '+';
  else if (streq(s, "reset")) action = '=';
  else if (streq(s, "limit")) action = '$';
  else if (streq(s, "note")) action = '#';
  else usage("invalid action");
d173 2
a174 2
  int n = scanu(s, &amount);
  if (n == 0) usage("invalid amount");
d179 2
a180 2
  int n = scani(s, &balance); /* may be negative! */
  if (n == 0) usage("invalid balance");
d185 6
a190 19
  long value;
  int n = scani(s, &value);
  if (n > 0) limit = value;
  else if (streq(s, "none")) limit = UNLIMITED;
  else usage("invalid limit");
}

void die(int code, char *s1, char *s2, char *s3)
{
  logfmt("%s: ", me);
  if (s1) logstr(s1);
  if (s2) logstr(s2);
  if (s3) logstr(s3);
  if (errno) {
  	logstr(": ");
  	logstr(strerror(errno));
  }
  logchar('\n');
  exit(code);
d195 4
a198 5
  if (s) logline((char *) s);
  else logfmt("This is %s", id);
  logfmt("Usage: %s [-V] account action {argument}\n", me);
  logline("action: debit, credit, reset, limit, note");
  exit(127);
@
