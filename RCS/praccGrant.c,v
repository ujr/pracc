head	1.2;
access;
symbols;
locks
	ujr:1.2; strict;
comment	@ * @;


1.2
date	2009.10.06.19.26.45;	author ujr;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.05.17.20.13;	author ujr;	state Exp;
branches;
next	;


desc
@Check if access to a pracc file should be granted or denied.
@


1.2
log
@*** empty log message ***
@
text
@#include "pracc.h"

#include <errno.h>
#include <grp.h>
#include <pwd.h>
#include <string.h>
#include <sys/types.h>
#include <unistd.h>
#ifdef DEBUG
#include <stdio.h>
#endif

#include "hasgroup.h"

/*
 * Check if access to a pracc file should be granted or denied.
 * Pracc files have owner:group = root:pracc, so ordinary users
 * cannot access their pracc files other than through tools.
 *
 * Tools that run set-uid root or set-gid pracc must make sure
 * that users access pracc files in an orderly manner, that is:
 *
 *  1. each user can access his/her personal account
 *  2. each user can access group account X iff he/she is in group X
 *  3. tools must make sure users do not tamper with their accounts
 *
 * The praccGrant() routine ensures rules 1 and 2.
 *
 * Return 0 if access should be granted, 1 if access should be
 * denied, and -1 if there was a system error (in this case errno
 * gives details about the error and access should be denied).
 *
 * Note: this routine returns 1 (deny access) if it is running
 * set-uid or set-gid and the given username does not match the
 * real uid. Otherwise, it is assumed that the username argument
 * was authenticated by the calling instance!
 */

#define DENY 1
#define GRANT 0
#define ERROR -1

int praccGrant(const char *username, const char *acctname)
{
   struct passwd *pw;
   struct group *pgr;
   uid_t useruid;
   gid_t praccgid;
   int inpracc;
   char **pp;

   pgr = getgrnam(PRACCGROUP);
   if (!pgr) return ERROR;
   praccgid = pgr->gr_gid;
   inpracc = hasgroup(praccgid);

/*
 * Pracc files are accessible only to root and group pracc,
 * so we check if the effective uid is root or if the effective
 * gid is pracc or if one of the auxiliary gids is pracc.
 */

   if ((geteuid() != 0) && (getegid() != praccgid) && !inpracc) {
      errno = EPERM; // operation not permitted
      return ERROR;
   }

/*
 * Check the given username for plausibility: it must
 * exist in the system user database and, if we are
 * running set-uid or set-gid, also match the real uid.
 */

   pw = getpwnam((char *) username);
   if (!pw) switch (errno) {
      case 0:
      case ENOENT:
      case ESRCH:
         errno = 0;
         return DENY; // invalid user
      default:
         return ERROR;
   }

#ifdef DEBUG
   fprintf(stderr, "DEBUG: praccGrant: requesting user:%s #%d\n",
           username, pw->pw_uid);
   fprintf(stderr, "DEBUG: praccGrant: requested account: %s\n", acctname);
#endif

   useruid = pw->pw_uid;
   if ((getuid() != geteuid()) || (getgid() != getegid())) {
      if (useruid != getuid()) return DENY;
   }

/*
 * Ok, we are technically able to access pracc files and
 * the given username looks plausible. Now check if the
 * account to be accessed is the user's personal account
 * or a group account to which the user has access.
 */

   if (strcmp(username, acctname) == 0) return GRANT; // personal account

   pgr = getgrnam(acctname);
   if (!pgr) return DENY; // not ERROR
   for (pp = pgr->gr_mem; *pp; pp++) {
      if (strcmp(*pp, username) == 0) return GRANT; // group account
   }

/*
 * The given acctname corresponds neither to the given user's
 * personal account nor to a group account of which the user
 * is a member. Therefore, access should be denied.
 */

   errno = 0;
   return DENY;
}

@


1.1
log
@Initial revision
@
text
@d1 1
a1 2
/* This file is part of the "pracc" printer accounting software. */
/* Copyright (c) 2007 by Urs-Jakob Ruetschi. All rights reserved */
d6 1
d8 4
a11 1
#include <stdio.h> // DEBUG
d13 1
a13 1
#include "pracc.h"
d15 1
a15 1
/* 
d27 4
a30 3
 * This routine is part of the pracc API and ensures rule 1 and 2.
 * It returns 0 if access should be granted, 1 if access should be
 * denied, and -1 if there was a system error (in which case errno
d43 1
a43 1
int praccaccess(const char *username, const char *acctname)
a51 3
   fprintf(stderr, "praccaccess: user = %s, account = %s\n", \
   		username, acctname); // DEBUG

a54 10

   fprintf(stderr, "praccaccess: PRACCGROUP = %s = %d\n", \
   		PRACCGROUP, praccgid); // DEBUG

   /*
    * Pracc files are accessible only to root and group pracc,
    * so we check if the effective uid is root or if the effective
    * gid is pracc or if one of the auxiliary gids is pracc.
    */

d57 5
a61 2
   fprintf(stderr, "praccaccess: uid = %d:%d, gid = %d:%d, inpracc = %d\n", \
   		getuid(), geteuid(), getgid(), getegid(), inpracc); // DEBUG
d68 5
a72 5
   /*
    * Check the given username for plausibility: it must
    * exist in the system user database and, if we are
    * running set-uid or set-gid, match the real uid.
    */
d85 5
a89 2
   fprintf(stderr, "praccaccess: requesting user = %s = %d\n", \
   		username, pw->pw_uid); // DEBUG
d92 3
a94 9
   if ((getuid() != geteuid()) || (getgid() != getegid()))
      if (useruid != getuid()) return DENY; // invalid user
   
   /*
    * Ok, we are technically able to access pracc files and
    * the given username looks plausible. Now check if the
    * account to be accessed is the user's personal account
    * or a group account to which the user has access.
    */
d96 6
a101 1
   fprintf(stderr, "praccaccess: checking personal account...\n"); // DEBUG
a104 2
   fprintf(stderr, "praccaccess: checking group accounts...\n"); // DEBUG

d106 1
a106 1
   if (!pgr) return ERROR;
a107 1
      fprintf(stderr, "praccaccess: grp %s ? %s\n", *pp, acctname); // DEBUG
d111 5
a115 5
   /*
    * The given acctname corresponds neither to the given user's
    * personal account nor to a group account to which the user
    * has access => access should be denied.
    */
d120 1
@
