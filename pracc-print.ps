%!PS-Adobe-3.0
%%Title: pracc-print.c
%%For: Urs-Jakob
%%Creator: a2ps version 4.14
%%CreationDate: Sun Apr 10 13:07:36 2011
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 8
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 8.005733 def
/cw 4.803440 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   501.959430 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/* pracc-print - send a print job to a printer) c n
( *) N
( * Copyright \(c\) 2010 by Urs-Jakob Ruetschi.) N
( * Use at your own exclusive risk and under the terms of the GNU) N
( * General Public License.  See AUTHORS, COPYRIGHT, and COPYING.) N
( */) N
() p n
(// 2010-xx-xx      ?      coding) c n
(// 2010-12-21  2130-2330  coding) N
(// 2010-12-22  2200-2300  coding) N
(// 2011-01-01  1500-..    testing mit dem brother HL-2150N) N
() p n
(static) K
( ) p
(char) k
( id[] = ") p
(This is pracc-print by ujr\\n$Revision$\\n) str
(";) p n
() N
(#include) K
( <assert.h>) p n
(#include) K
( <errno.h>) p n
(#include) K
( <fcntl.h>) p n
(#include) K
( <netinet/in.h>) p n
(#include) K
( <stdarg.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <sys/socket.h>) p n
(#include) K
( <sys/types.h>) p n
(#include) K
( <unistd.h>) p n
() N
(#include) K
( ") p
(ps.h) str
(") p n
(#include) K
( ") p
(pjl.h) str
(") p n
() N
(#define) K
( min\(x,y\) \(\(x\) < \(y\) ? \(x\) : \(y\)\)) p n
(#define) K
( max\(x,y\) \(\(x\) > \(y\) ? \(x\) : \(y\)\)) p n
() N
(#define) K
( DEFLT_WAIT0_PS 20    ) p
(/* pause before first pc probe */) c n
(#define) K
( DEFLT_WAIT1_PS 10    ) p
(/* pause between more pc probes */) c n
(#define) K
( DEFLT_WAIT0_PJL 300  ) p
(/* timeout for first PJL reply */) c n
(#define) K
( DEFLT_WAIT1_PJL 120  ) p
(/* timeout for subsequent replies */) c n
() p n
(enum) k
( {                       ) p
(// How to do page counting:) c n
(   PCMODE_OFF = 0,           ) p
(// -not at all) c n
(   PCMODE_POSTSCRIPT = 1,    ) p
(// -using PostScript commands) c n
(   PCMODE_PJL = 2            ) p
(// -using PJL JOB/EOJ and PAGE) c n
(};) p n
() N
(enum) k
( {                       ) p
(// States of a PJL job:) c n
(   PJL_STATE_INIT = 0,       ) p
(// -initial) c n
(   PJL_STATE_SYNC,           ) p
(// -after @PJL ECHO with our cookie) c n
(   PJL_STATE_JOB,            ) p
(// -after "our" @PJL USTATUS JOB) c n
(   PJL_STATE_EOJ,            ) p
(// -after "our" @PJL USTATUS EOJ) c n
(   PJL_STATE_PC2,            ) p
(// -after 2nd @PJL INFO PAGECOUNT) c n
(   PJL_STATE_DONE            ) p
(// -after 2nd pagecount arrived) c n
(};) p n
() N
(enum) k
( {) p n
(   DEBUG = 0,) N
(   INFO  = 1,) N
(   WARN  = 2,) N
(   ERROR = 3,) N
(   FATAL = 4) N
(};) N
() N
(void) k
( help\(\), usage\() p
(const) K
( ) p
(char) k
( *s\);) p n
(int) k
( tcpconnect\() p
(unsigned) k
( ) p
(char) k
( ip[4], ) p
(unsigned) k
( ) p
(short) k
( port, ) p
(int) k
( secs\);) p n
(pracc-print.c) (Page 1/15) (Jan 01, 11 17:11) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(int) k
( tcplocal\() p
(int) k
( sockfd, ) p
(unsigned) k
( ) p
(char) k
( ip[4], ) p
(unsigned) k
( ) p
(short) k
( *port\);) p n
(long) k
( sendjob\() p
(int) k
( jobfd, ) p
(int) k
( devfd, ) p
(int) k
( cookie\);) p n
(void) k
( getstatus\() p
(int) k
( devfd, ) p
(int) k
( cookie\);) p n
(int) k
( handleinput\() p
(int) k
( devfd, ) p
(int) k
( cookie\);) p n
(void) k
( parseinput\() p
(const) K
( ) p
(char) k
( *buf, ) p
(unsigned) k
( len, ) p
(int) k
( cookie\);) p n
(void) k
( psinput\() p
(const) K
( ) p
(char) k
( *buf, ) p
(unsigned) k
( len, ) p
(int) k
( cookie\);) p n
(void) k
( pjlinput\() p
(const) K
( ) p
(char) k
( *buf, ) p
(unsigned) k
( len, ) p
(int) k
( cookie\);) p n
(const) K
( ) p
(char) k
( *getmodestr\() p
(int) k
( pcmode\);) p n
(const) K
( ) p
(char) k
( *getpjlstatestr\() p
(int) k
( pjlstate\);) p n
(int) k
( writeall\() p
(int) k
( fd, ) p
(const) K
( ) p
(char) k
( *buf, ) p
(unsigned) k
( len\);) p n
(ssize_t writen\() S
(int) k
( fd, ) p
(const) K
( ) p
(void) k
( *buf, size_t len\);) p n
(int) k
( fdblocking\() p
(int) k
( fd\);) p n
(int) k
( fdnonblock\() p
(int) k
( fd\);) p n
(char) k
( *progname\() p
(char) k
( **argv\);) p n
(void) k
( logup\() p
(int) k
( level, ) p
(const) K
( ) p
(char) k
( *fmt, ...\);) p n
(void) k
( die\() p
(int) k
( code, ) p
(const) K
( ) p
(char) k
( *fmt, ...\);) p n
() N
(extern) K
( ) p
(int) k
( optind;) p n
(extern) K
( ) p
(char) k
( *optarg;) p n
(extern) K
( ) p
(int) k
( opterr;) p n
() N
(char) k
( *me;                    ) p
(// hello, my name is...) c n
(int) k
( loglevel = INFO;) p n
(int) k
( pcmode = PCMODE_OFF;) p n
(int) k
( wait0 = -1, wait1 = -1;  ) p
(// delays waiting for page ejects) c n
(long) k
( pages = -1;             ) p
(// #pages printed, initially unknown) c n
(long) k
( pc1 = -1, pc2 = -1;     ) p
(// printer's pagecount, before and after) c n
(int) k
( pcpending;               ) p
(// waiting for a PS pagecount report) c n
(int) k
( pjlstate;                ) p
(// finite state machine for PJL job) c n
(long) k
( jobbytes = 0;           ) p
(// #bytes of job data sent to printer) c n
(long) k
( devbytes = 0;           ) p
(// #bytes read from printer) c n
() p n
(int) k n
(main\() p
(int) k
( argc, ) p
(char) k
( *argv[], ) p
(char) k
( *envp[]\)) p n
({) N
(   ) S
(unsigned) k
( ) p
(char) k
( ip[4];) p n
(   ) S
(unsigned) k
( ) p
(short) k
( port = 9100;) p n
(   ) S
(int) k
( c, secs = 10, value;) p n
() N
(   ) S
(int) k
( devfd;          ) p
(// the network connection) c n
(   ) p
(int) k
( cookie;         ) p
(// for message authentication) c n
(   ) p
(char) k
( *printer;      ) p
(// printer address, eg, "1.2.3.4:9100") c n
() p n
(   me = progname\(argv\);) N
(   ) S
(if) K
( \(!me\) ) p
(return) K
( 127;) p n
() N
(   opterr = 0; ) S
(// prevent getopt output) c n
(   ) p
(while) K
( \(\(c = getopt\(argc, argv, ") p
(hjpqr:s:vV) str
("\)\) > 0\) ) p
(switch) K
( \(c\)) p n
(   {) N
(      ) S
(case) K
( ') p
(h) str
(':) p n
(         help\(\);) N
(         ) S
(return) K
( 0;) p n
(      ) S
(case) K
( ') p
(j) str
(':) p n
(         pcmode = PCMODE_PJL;) N
(         ) S
(break) K
(;) p n
(      ) S
(case) K
( ') p
(p) str
(':) p n
(         pcmode = PCMODE_POSTSCRIPT;) N
(         ) S
(break) K
(;) p n
(      ) S
(case) K
( ') p
(q) str
(':) p n
(         loglevel = ERROR;) N
(         ) S
(break) K
(;) p n
(      ) S
(case) K
( ') p
(v) str
(':) p n
(pracc-print.c) (Page 2/15) (Jan 01, 11 17:11) title
border
grestore
(Printed by Urs-Jakob) rhead
(pracc-print.c) (1/8) (Sunday April 10, 2011) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         loglevel = max\(loglevel - 1, DEBUG\);) p n
(         ) S
(break) K
(;) p n
(      ) S
(case) K
( ') p
(r) str
(':) p n
(         ) S
(if) K
( \(*optarg && optarg[scani\(optarg, &value\)] == ') p
(\\0) str
('\)) p n
(            wait0 = value;) N
(         ) S
(else) K
( usage\(") p
(invalid argument to -r option) str
("\);) p n
(         ) S
(break) K
(;) p n
(      ) S
(case) K
( ') p
(s) str
(':) p n
(         ) S
(if) K
( \(*optarg && optarg[scani\(optarg, &value\)] == ') p
(\\0) str
('\)) p n
(            wait1 = value;) N
(         ) S
(else) K
( usage\(") p
(invalid argument to -s option) str
("\);) p n
(         ) S
(break) K
(;) p n
(      ) S
(case) K
( ') p
(V) str
(':) p n
(         printf\(") S
(%s\\n) str
(", id\);) p n
(         ) S
(return) K
( 0;) p n
(      ) S
(default) K
(:) p n
(         usage\(") S
(invalid option) str
("\);) p n
(         ) S
(return) K
( 127;) p n
(   }) N
() N
(   argc -= optind;) N
(   argv += optind;) N
() N
(   ) S
(if) K
( \(*argv\) printer = *argv++;) p n
(   ) S
(else) K
( usage\(") p
(printer not specified) str
("\);) p n
() N
(   ) S
(if) K
( \(scanip4op\(printer, &ip, &port\) <= 0\)) p n
(   {) N
(      usage\(") S
(Invalid ip and/or port for printer) str
("\);) p n
(   }) N
() N
(   logup\(INFO, ") S
(Connecting to %d.%d.%d.%d port %d ...) str
(",) p n
(         ip[0], ip[1], ip[2], ip[3], port\);) N
() N
(   ) S
(if) K
( \(\(devfd = tcpconnect\(ip, port, secs\)\) < 0\)) p n
(   {) N
(      die\(111, ") S
(Cannot connect) str
("\);) p n
(   }) N
() N
(   ) S
(if) K
( \(tcplocal\(devfd, ip, &port\) < 0\)) p n
(   {) N
(      die\(111, ") S
(Cannot get local address/port) str
("\);) p n
(   }) N
() N
(   logup\(DEBUG, ") S
(Local address is %d.%d.%d.%d port %d) str
(",) p n
(         ip[0], ip[1], ip[2], ip[3], port\);) N
() N
(   srand\(time\(0\) ^ getpid\(\)\);) N
(   cookie = 10000 + \(rand\(\) & 65535\);) N
() N
(   ) S
(/** Synchronise **/) c n
() p n
(   ) S
(if) K
( \(pcmode == PCMODE_POSTSCRIPT\)) p n
(   {) N
(      psinit\(\);) N
(      ) S
(if) K
( \(pscount\(devfd, cookie\)\)) p n
(         die\(127, ") S
(pscount) str
("\);) p n
(      pcpending = 0;) N
() N
(      ) S
(if) K
( \(wait0 < 0\) wait0 = DEFLT_WAIT0_PS;) p n
(      ) S
(if) K
( \(wait1 < 0\) wait1 = DEFLT_WAIT1_PS;) p n
() N
(pracc-print.c) (Page 3/15) (Jan 01, 11 17:11) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      logup\(DEBUG, ") p
(Page counting using PostScript, wait0=%d, wait1=%d) str
(", wait0, wait1\);) p n
(   }) N
() N
(   ) S
(if) K
( \(pcmode == PCMODE_PJL\)) p n
(   {) N
(      pjlinit\(\);) N
(      ) S
(if) K
( \(pjluel\(devfd\)\)               ) p
(// send a UEL) c n
(         die\(127, ") p
(pjluel) str
("\);) p n
(      ) S
(if) K
( \(pjlecho\(devfd, cookie\)\)      ) p
(// @PJL ECHO cookie) c n
(         die\(127, ") p
(pjlecho) str
("\);) p n
(      ) S
(if) K
( \(pjlcount\(devfd\)\)             ) p
(// @PJL INFO PAGECOUNT) c n
(         die\(127, ") p
(pjlcount) str
("\);) p n
(      ) S
(if) K
( \(pjljob\(devfd, cookie, 0, 0\)\) ) p
(// @PJL JOB cookie ...) c n
(         die\(127, ") p
(pjljob) str
("\);) p n
(      pjlstate = PJL_STATE_INIT;) N
() N
(      ) S
(if) K
( \(wait0 < 0\) wait0 = DEFLT_WAIT0_PJL;) p n
(      ) S
(if) K
( \(wait1 < 0\) wait1 = DEFLT_WAIT1_PJL;) p n
() N
(      logup\(DEBUG, ") S
(Page counting using PJL, wait0=%d, wait1=%d) str
(", wait0, wait1\);) p n
(   }) N
() N
(   ) S
(/** Send print job **/) c n
() p n
(   ) S
(if) K
( \(*argv\) ) p
(while) K
( \(*argv\)) p n
(   {) N
(      ) S
(char) k
( *jobfn = *argv++;) p n
(      ) S
(int) k
( jobfd = open\(jobfn, O_RDONLY\);) p n
() N
(      ) S
(if) K
( \(jobfd >= 0\)) p n
(      {) N
(         logup\(INFO, ") S
(Sending %s to printer ...) str
(", jobfn\);) p n
(         jobbytes += sendjob\(jobfd, devfd, cookie\);) N
(      }) N
(      ) S
(else) K n
(      {) p n
(         logup\(ERROR, ") S
(Open %s: %s) str
(", jobfn, strerror\(errno\)\);) p n
(      }) N
(   }) N
(   ) S
(else) K n
(   {) p n
(      logup\(INFO, ") S
(Sending stdin to printer ...) str
("\);) p n
(      ) S
(int) k
( jobfd = 0; ) p
(// stdin is fd 0) c n
(      jobbytes += sendjob\(jobfd, devfd, cookie\);) p n
(   }) N
() N
(   logup\(INFO, ") S
(Sent %d bytes job data to printer) str
(", jobbytes\);) p n
() N
(   ) S
(/** Get job status **/) c n
() p n
(   ) S
(if) K
( \(pcmode != PCMODE_OFF\)) p n
(   {) N
(      logup\(INFO, ") S
(Waiting for printer to finish ...) str
("\);) p n
(      getstatus\(devfd, cookie\);) N
(   }) N
() N
(   close\(devfd\);) N
() N
(   ) S
(/** Report results **/) c n
() p n
(   logup\(DEBUG, ") S
(Read %d bytes feedback from printer) str
(", devbytes\);) p n
() N
(pracc-print.c) (Page 4/15) (Jan 01, 11 17:11) title
border
grestore
(Printed by Urs-Jakob) rhead
(pracc-print.c) (2/8) (Sunday April 10, 2011) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   logup\(INFO, ") p
(Done, mode=%s pages=%d pc1=%d pc2=%d) str
(",) p n
(         getmodestr\(pcmode\), pages, pc1, pc2\);) N
() N
(   ) S
(// TODO - append pc.log record ?) c n
() p n
(   ) S
(return) K
( 0; ) p
(// ok) c n
(}) p n
() N
(void) k n
(help\(\)) p n
({) N
(   printf\(") S
(Send files to printer and count pages printed.\\n\\n) str
("\);) p n
(   printf\(") S
(Usage: %s [options] ip:port [files...]\\n\\n) str
(", me\);) p n
(   printf\(") S
(Options:\\n) str
("\);) p n
(   printf\(") S
( -h  print this help page\\n) str
("\);) p n
(   printf\(") S
( -j  use PJL for page counting \(default: don't count\)\\n) str
("\);) p n
(   printf\(") S
( -p  use PostScript for page counting \(default: don't count\)\\n) str
("\);) p n
(   printf\(") S
( -q  quiet \(set log level to ERROR and above\)\\n) str
("\);) p n
(   printf\(") S
( -r secs  how long to 'relax' after sending print job\\n) str
("\); ) p
(// wait0) c n
(   printf\(") p
( -s secs  how long to 'sleep' between probes/timeouts\\n) str
("\); ) p
(// wait1) c n
(   printf\(") p
( -v  increase verbosity \(can be used several times\)\\n) str
("\);) p n
(   printf\(") S
( -V  print version and exit\\n\\n) str
("\);) p n
(   printf\(") S
(The printer must be addressed using an IPv4 address,\\n) str
("\);) p n
(   printf\(") S
(optionally followed by a colon and the port number\\n) str
("\);) p n
(   printf\(") S
(\(default is 9100\). Example: 192.168.1.13:9101\\n) str
("\);) p n
(}) N
() N
(void) k n
(usage\() p
(const) K
( ) p
(char) k
( *s\)) p n
({) N
(   ) S
(if) K
( \(s\) fprintf\(stderr, ") p
(%s: %s\\n) str
(", me, s\);) p n
() N
(   fprintf\(stderr, ") S
(Usage: %s [options] ip:port [files...]\\n) str
(", me\);) p n
(   fprintf\(stderr, ") S
(Try option -h for help and -V for identification\\n) str
("\);) p n
() N
(   exit\(127\);) N
(}) N
() N
(int) k n
(tcpconnect\() p
(unsigned) k
( ) p
(char) k
( ip[4], ) p
(unsigned) k
( ) p
(short) k
( port, ) p
(int) k
( secs\)) p n
({) N
(   ) S
(struct) k
( sockaddr_in me;     ) p
(// the local end) c n
(   ) p
(struct) k
( sockaddr_in them;   ) p
(// the remote end) c n
(   ) p
(unsigned) k
( ) p
(char) k
( localip[4];) p n
(   ) S
(unsigned) k
( ) p
(short) k
( localport;) p n
(   ) S
(int) k
( rr, s;) p n
() N
(   localip[0] = localip[1] = localip[2] = localip[3] = 0;) N
(   localport = 0;) N
() N
(   ) S
(// Get a socket descriptor:) c n
(   s = socket\(AF_INET, SOCK_STREAM, IPPROTO_TCP\);) p n
(   ) S
(if) K
( \(s < 0\) ) p
(return) K
( -1; ) p
(// can't get socket, see errno) c n
(   ) p
(if) K
( \(fdnonblock\(s\) < 0\) ) p
(goto) K
( errout;) p n
() N
(   ) S
(// Bind to local address, if any:) c n
(   memset\(&me, 0, ) p
(sizeof) K
(\(me\)\);) p n
(   me.sin_family = AF_INET;) N
(   me.sin_port = htons\(localport\);) N
(   memcpy\(&me.sin_addr, localip, 4\);) N
(   rr = bind\(s, \() S
(struct) k
( sockaddr *\) &me, ) p
(sizeof) K
(\(me\)\);) p n
(   ) S
(if) K
( \(rr < 0\) ) p
(goto) K
( errout;) p n
(pracc-print.c) (Page 5/15) (Jan 01, 11 17:11) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(   ) S
(// Connect to remote address:) c n
(   memset\(&them, 0, ) p
(sizeof) K
(\(them\)\);) p n
(   them.sin_family = AF_INET;) N
(   them.sin_port = htons\(port\);) N
(   memcpy\(&them.sin_addr, ip, 4\);) N
() N
(   ) S
(// Some connect\(\) errors:) c n
(   ) p
(// -EINPROGRESS: operation now in progress) c n
(   ) p
(// -EALREADY: operation already in progress) c n
(   ) p
(// -EISCONN: endpoint already connected \(good\)) c n
(   ) p
(// -ETIMEDOUT: connection timed out) c n
(   ) p
(// -ECONNREFUSED: connection refused) c n
(   ) p
(// -ENETUNREACH: network unreachable) c n
() p n
(   ) S
(while) K
( \(1\)) p n
(   {) N
(      errno = 0;) N
(      rr = connect\(s, \() S
(struct) k
( sockaddr *\) &them, ) p
(sizeof) K
(\(them\)\);) p n
(      ) S
(if) K
( \(\(rr == 0\) && \(errno == 0\)\) ) p
(break) K
(; ) p
(// really no error: good) c n
(      ) p
(if) K
( \(errno == EISCONN\) ) p
(break) K
(; ) p
(// endpoint already connected: good) c n
(      ) p
(if) K
( \(\(errno == EALREADY\) || \(errno == EINPROGRESS\)\) { } ) p
(// nix) c n
(      ) p
(else) K
( ) p
(goto) K
( errout;) p n
(      ) S
(if) K
( \(secs > 0\) { secs -= 1; delay\(1\); }) p n
(      ) S
(else) K
( { errno = ETIMEDOUT; ) p
(goto) K
( errout; }) p n
(   }) N
() N
(   ) S
(if) K
( \(fdblocking\(s\) < 0\) ) p
(goto) K
( errout;) p n
() N
(   ) S
(return) K
( s; ) p
(// connected and non-blocking) c n
() p n
(errout:) N
(   rr = errno;) N
(   \() S
(void) k
(\) close\(s\);) p n
(   errno = rr;) N
(   ) S
(return) K
( -1; ) p
(// see errno) c n
(}) p n
() N
(int) k n
(tcplocal\() p
(int) k
( sockfd, ) p
(unsigned) k
( ) p
(char) k
( ip[4], ) p
(unsigned) k
( ) p
(short) k
( *port\)) p n
({) N
(   ) S
(struct) k
( sockaddr_in sa;) p n
(   socklen_t dummy = ) S
(sizeof) K
(\(sa\);) p n
() N
(   ) S
(if) K
( \(getsockname\(sockfd, \() p
(struct) k
( sockaddr *\) &sa, &dummy\) < 0\)) p n
(      ) S
(return) K
( -1;) p n
(   memcpy\(ip, \() S
(const) K
( ) p
(void) k
( *\) &sa.sin_addr, 4\);) p n
(   ) S
(if) K
( \(port\) *port = ntohs\(sa.sin_port\);) p n
() N
(   ) S
(return) K
( 0; ) p
(// ok) c n
(}) p n
() N
(/*) c n
( * Send print job data to printer and handle data sent back) N
( * by printer. This is a classical select\(\) loop, reading from) N
( * two file descriptors \(jobfd, devfd\) and writing to one \(devfd\).) N
( */) N
(long) k n
(sendjob\() p
(int) k
( jobfd, ) p
(int) k
( devfd, ) p
(int) k
( cookie\)) p n
({) N
(   ) S
(int) k
( nfds;) p n
(   fd_set rfds, wfds;) N
(pracc-print.c) (Page 6/15) (Jan 01, 11 17:11) title
border
grestore
(Printed by Urs-Jakob) rhead
(pracc-print.c) (3/8) (Sunday April 10, 2011) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   ) p
(char) k
( buffer[8192];) p n
(   ) S
(char) k
( *bufptr = buffer;) p n
(   ) S
(long) k
( bytes = 0, total = 0;) p n
() N
(   ) S
(if) K
( \(fdnonblock\(devfd\) < 0\) ) p
(// want non-blocking printer i/o) c n
(      die\(127, ") p
(cannot set O_NONBLOCK on devfd) str
("\);) p n
(   ) S
(if) K
( \(fdnonblock\(jobfd\) < 0\) ) p
(// want non-blocking job reading) c n
(      die\(127, ") p
(cannot set O_NONBLOCK on jobfd) str
("\);) p n
() N
(   ) S
(// for select\(\): one more than the largest fd:) c n
(   nfds = 1 + \(\(jobfd > devfd\) ? jobfd : devfd\);) p n
() N
(   ) S
(while) K
( \(1\)) p n
(   {) N
(      FD_ZERO\(&rfds\);) N
(      FD_ZERO\(&wfds\);) N
() N
(      ) S
(if) K
( \(bytes > 0\) {) p n
(         FD_SET\(devfd, &wfds\);) N
(         FD_SET\(devfd, &rfds\);) N
(      }) N
(      ) S
(else) K
( {) p n
(         FD_SET\(jobfd, &rfds\);) N
(      }) N
() N
(      ) S
(if) K
( \(select\(nfds, &rfds, &wfds, ) p
(NULL) K
(, ) p
(NULL) K
(\) < 0\)) p n
(      {) N
(         die\(127, ") S
(sendjob's call to select) str
("\);) p n
(         ) S
(// Note: cupspracc sleeps 2 secs and tries again...?) c n
(      }) p n
() N
(      ) S
(// Async printer input:) c n
() p n
(      ) S
(if) K
( \(FD_ISSET\(devfd, &rfds\)\)) p n
(      {) N
(         handleinput\(devfd, cookie\);) N
(      }) N
() N
(      ) S
(// Read print job data:) c n
() p n
(      ) S
(if) K
( \(\(bytes == 0\) && FD_ISSET\(jobfd, &rfds\)\)) p n
(      {) N
(         ssize_t n = read\(jobfd, buffer, ) S
(sizeof) K
(\(buffer\)\);) p n
(         ) S
(if) K
( \(n > 0\) {bytes = n;logup\(DEBUG,") p
(Read %d bytes job data) str
(",n\);}) p n
(         ) S
(else) K
( ) p
(if) K
( \(n < 0\) {) p n
(            ) S
(if) K
( \(errno == EAGAIN || errno == EINTR\) bytes = 0;) p n
(            ) S
(else) K
( { ) p
(// all other errors:) c n
(               logup\(ERROR, ") p
(sendjob: read\(jobfd\): %s) str
(", strerror\(errno\)\);) p n
(               ) S
(return) K
( -1; ) p
(// see errno) c n
(            }) p n
(         }) N
(         ) S
(else) K
( ) p
(break) K
(; ) p
(// end-of-file, we're done) c n
() p n
(         bufptr = buffer; ) S
(// reset bufptr) c n
(      }) p n
() N
(      ) S
(// Write job data to printer:) c n
() p n
(      ) S
(if) K
( \(\(bytes > 0\) && FD_ISSET\(devfd, &wfds\)\)) p n
(      {) N
(         ssize_t n = write\(devfd, bufptr, bytes\);) N
(         ) S
(if) K
( \(n < 0\) logup\(ERROR, ") p
(sendjob: write\(devfd\): %s) str
(", strerror\(errno\)\);) p n
(pracc-print.c) (Page 7/15) (Jan 01, 11 17:11) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         ) p
(else) K
( {) p n
(            bytes -= n;) N
(            bufptr += n;) N
(            total += n;) N
(         }) N
(      }) N
(   }) N
() N
(   ) S
(return) K
( total; ) p
(// #bytes sent to printer) c n
(}) p n
() N
(void) k n
(getstatus\() p
(int) k
( devfd, ) p
(int) k
( cookie\)) p n
({) N
(   ) S
(long) k
( lastpages, i;) p n
(   ) S
(struct) k
( timeval timeout;) p n
() N
(   ) S
(if) K
( \(pcmode == PCMODE_POSTSCRIPT\)) p n
(   {) N
(      ) S
(for) K
( \(i = wait0; i > 0; i = sleep\(i\)\);) p n
(      ) S
(if) K
( \(pscount\(devfd, cookie\) < 0\)) p n
(         die\(127, ") S
(pscount) str
("\);) p n
(      lastpages = pages - 1; ) S
(// -2) c n
(      timeout.tv_sec = wait1;) p n
(   }) N
(   ) S
(else) K
( ) p
(if) K
( \(pcmode == PCMODE_PJL\)) p n
(   {) N
(      ) S
(// Note: cupspracc sends jobid instead of cookie) c n
(      ) p
(if) K
( \(pjleoj\(devfd, cookie\) < 0\)) p n
(         die\(127, ") S
(pjleoj) str
("\);) p n
(      timeout.tv_sec = wait0;) N
(   }) N
() N
(   ) S
(while) K
( \(1\)) p n
(   {) N
(      fd_set rfds;) N
(      ) S
(char) k
( buf[1024];) p n
(      ) S
(int) k
( r;) p n
() N
(      ) S
(// Revert to non-blocking printer i/o:) c n
(      ) p
(if) K
( \(fdnonblock\(devfd\) < 0\)) p n
(         die\(127, ") S
(cannot set O_NONBLOCK on devfd) str
("\);) p n
() N
(      FD_ZERO\(&rfds\);) N
(      FD_SET\(devfd, &rfds\);) N
(      timeout.tv_usec = 0;) N
() N
(      ) S
(// Wait until something to read or timeout:) c n
(      ) p
(if) K
( \(\(r = select\(devfd+1, &rfds, ) p
(NULL) K
(, ) p
(NULL) K
(, &timeout\)\) <= 0\)) p n
(      {) N
(         ) S
(if) K
( \(r == 0\) logup\(DEBUG, ") p
(Timeout waiting for printer) str
("\);) p n
(         ) S
(else) K
( logup\(ERROR, ") p
(select failed) str
("\);) p n
(         ) S
(break) K
(; ) p
(// error or timeout: silently give up) c n
(      }) p n
() N
(      ) S
(// Read the printer; break on EOF or error:) c n
(      ) p
(if) K
( \(handleinput\(devfd, cookie\) <= 0\) ) p
(break) K
(;) p n
() N
(      ) S
(if) K
( \(pcmode == PCMODE_POSTSCRIPT\)) p n
(      {) N
(         ) S
(if) K
( \(pcpending && \(pages == lastpages\)\) ) p
(break) K
(;) p n
(         ) S
(if) K
( \(pages > 0\) logup\(DEBUG, ") p
(Pages printed: %d) str
(", pages\);) p n
(pracc-print.c) (Page 8/15) (Jan 01, 11 17:11) title
border
grestore
(Printed by Urs-Jakob) rhead
(pracc-print.c) (4/8) (Sunday April 10, 2011) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(         ) p
(for) K
( \(i = wait1; i > 0; i = sleep\(i\)\);) p n
(         ) S
(if) K
( \(pscount\(devfd, cookie\) < 0\) die\(127, ") p
(pscount) str
("\);) p n
(         lastpages = pages;) N
(         pcpending = 0;) N
(      }) N
(      ) S
(else) K
( ) p
(if) K
( \(pcmode == PCMODE_PJL\)) p n
(      {) N
(         ) S
(if) K
( \(pjlstate == PJL_STATE_EOJ\)) p n
(         {) N
(            ) S
(// After @PJL USTATUS EOJ, send another @PJL INFO PAGECOUNT:) c n
(            ) p
(if) K
( \(pjlcount\(devfd\) < 0\) die\(127, ") p
(pjlcount) str
("\);) p n
(            pjlstate = PJL_STATE_PC2;) N
(         }) N
(         ) S
(else) K
( ) p
(if) K
( \(pjlstate == PJL_STATE_PC2\)) p n
(         {) N
(            ) S
(if) K
( \(pc1 >= 0 && pc2 > pc1 + pages\) {) p n
(               logup\(DEBUG, ") S
(Setting pages from pc delta \(pages ) str
(") p n
(                            ") S
(was %d, delta is %d\)) str
(", pages, pc2 - pc1\);) p n
(               pages = pc2 - pc1;) N
(            }) N
(            pjlstate = PJL_STATE_DONE;) N
(            ) S
(break) K
(;) p n
(         }) N
(      }) N
() N
(      ) S
(// Reset the select timeout:) c n
(      timeout.tv_sec = wait1;) p n
(      timeout.tv_usec = 0;) N
(   }) N
() N
(   ) S
(if) K
( \(pcmode == PCMODE_PJL\)) p n
(   {) N
(      ) S
(// Errors, typically broken pipe, are non-fatal here) c n
(      ) p
(// because the printer may closed the connection by now:) c n
(      ) p
(if) K
( \(pjloff\(devfd\)\) logup\(ERROR, ") p
(pjloff) str
("\);) p n
(      ) S
(if) K
( \(pjluel\(devfd\)\) logup\(ERROR, ") p
(pjluel) str
("\);) p n
(   }) N
(}) N
() N
(/*) c n
( * To be called after select\(\) indicated that there's) N
( * something to read from the given devfd. Return nbytes.) N
( */) N
(int) k n
(handleinput\() p
(int) k
( devfd, ) p
(int) k
( cookie\)) p n
({) N
(   ) S
(char) k
( buf[1024];) p n
(   ssize_t nbytes;) N
() N
(   nbytes = read\(devfd, buf, ) S
(sizeof) K
(\(buf\)\);) p n
() N
(   ) S
(if) K
( \(nbytes > 0\)) p n
(   {) N
(      parseinput\(buf, nbytes, cookie\);) N
(      devbytes += nbytes;) N
(   }) N
(   ) S
(else) K
( ) p
(if) K
( \(nbytes == 0\)) p n
(   {) N
(      ) S
(// After successful select\(\), this means EOF:) c n
(      logup\(DEBUG, ") p
(Printer closed connection) str
("\);) p n
(   }) N
(   ) S
(else) K n
(pracc-print.c) (Page 9/15) (Jan 01, 11 17:11) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   {) p n
(      logup\(ERROR, ") S
(Reading printer failed: %s) str
(", strerror\(errno\)\);) p n
(   }) N
() N
(   ) S
(return) K
( nbytes;) p n
(}) N
() N
(/*) c n
( * Handle input from the printer: write to log file and) N
( * look for messages \(PostScript or PJL\) and parse them.) N
( */) N
(void) k n
(parseinput\() p
(const) K
( ) p
(char) k
( *buf, ) p
(unsigned) k
( len, ) p
(int) k
( cookie\)) p n
({) N
(   ) S
(char) k
( out[64];) p n
(   ) S
(int) k
( i, n;) p n
() N
(   n = min\() S
(sizeof) K
(\(out\) - 4, len\);) p n
() N
(   ) S
(for) K
( \(i = 0; i < n; i++\)) p n
(   {) N
(      ) S
(register) K
( ) p
(char) k
( c = buf[i];) p n
(      out[i] = \(\(c ==  ') S
( ) str
('\) || isgraph\(c\)\) ? c : ') p
(.) str
(';) p n
(   }) N
() N
(   ) S
(if) K
( \(len > n\)) p n
(   {) N
(      out[i++] = ') S
(.) str
('; out[i++] = ') p
(.) str
('; out[i++] = ') p
(.) str
(';) p n
(   }) N
() N
(   out[i] = ') S
(\\0) str
('; ) p
(// terminate string) c n
() p n
(   logup\(DEBUG, ") S
(Got %d bytes from printer: %s) str
(", len, out\);) p n
() N
(   ) S
(switch) K
( \(pcmode\)) p n
(   {) N
(      ) S
(case) K
( PCMODE_POSTSCRIPT:) p n
(         psinput\(buf, len, cookie\);) N
(         ) S
(break) K
(;) p n
(      ) S
(case) K
( PCMODE_PJL:) p n
(         pjlinput\(buf, len, cookie\);) N
(         ) S
(break) K
(;) p n
(      ) S
(default) K
(: ) p
(/* ignore */) c
( ;) p n
(   }) N
(}) N
() N
() N
(// globals: pc1, pc2, pages) c n
(void) k n
(psinput\() p
(const) K
( ) p
(char) k
( *buf, ) p
(unsigned) k
( len, ) p
(int) k
( cookie\)) p n
({) N
(   ) S
(register) K
( ) p
(const) K
( ) p
(char) k
( *p = buf;) p n
(   ) S
(const) K
( ) p
(char) k
( *end = buf + len;) p n
() N
(   ) S
(while) K
( \(p < end\) {) p n
(      ) S
(int) k
( t = pschar\(*p++\);) p n
(      ) S
(if) K
( \(t\) ) p
(switch) K
( \(t\) {) p n
(      ) S
(case) K
( PS_MSG_PAGECOUNT:) p n
(         ) S
(if) K
( \(ps_cookie == cookie\) {) p n
(            logup\(DEBUG, ") S
(psinput: PAGECOUNT %d) str
(", ps_pagecount\);) p n
(            ) S
(if) K
( \(pc1 < 0\) pc1 = ps_pagecount; ) p
(// initial pc) c n
(            ) p
(else) K
( ) p
(if) K
( \(ps_pagecount >= pc1\) {) p n
(pracc-print.c) (Page 10/15) (Jan 01, 11 17:11) title
border
grestore
(Printed by Urs-Jakob) rhead
(pracc-print.c) (5/8) (Sunday April 10, 2011) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(               pc2 = ps_pagecount;) p n
(               pages = pc2 - pc1;) N
(            }) N
(            pcpending = 1; ) S
(// got valid pc message) c n
(         }) p n
(         ) S
(else) K
( logup\(DEBUG, ") p
(psinput: got cookie %ld, expected %ld) str
(",) p n
(                    ps_cookie, cookie\);) N
(         ) S
(break) K
(;) p n
() N
(      ) S
(case) K
( PS_MSG_PRERROR:) p n
(         logup\(ERROR, ") S
(PrinterError: %s) str
(", ps_error\);) p n
(         exit\(1\); ) S
(//CUPS_BACKEND_FAILED) c n
(         ) p
(break) K
(;) p n
() N
(      ) S
(case) K
( PS_MSG_FLUSHING:) p n
(         logup\(ERROR, ") S
(Flushing: rest of job will be ignored) str
("\);) p n
(         exit\(2\); ) S
(//CUPS_BACKEND_CANCEL // cancel job) c n
(         ) p
(break) K
(;) p n
(      }) N
(   }) N
(}) N
() N
(/*) c n
( * Parse PJL messages and try counting pages printed.) N
( * Use the messages to advance in a simple state diagram:) N
( *) N
( *   INIT---\(1\)-->SYNCED---\(2\)-->JOB---\(3\)-->EOJ---\(4\)-->DONE) N
( *) N
( * Transitions: \(1\) ECHO with our cookie; \(2\) JOB with) N
( * our cookie; \(3\) EOJ with our cookie; \(4\) 2nd PAGECOUNT.) N
( *) N
( * While INJOB, use all PAGE and EOJ messages to set) N
( * the global pages variable, not just our EOJ message.) N
( * Reason: at least the HP LaserJet 5000 gets the EOJ) N
( * pages wrong for nested JOB/EOJ pairs; to reproduce,) N
( * print a Windows Test Page to an HP LaserJet 5000...) N
( */) N
(// globals: pjlstate, pc1, pc2, pages) N
(void) k n
(pjlinput\() p
(const) K
( ) p
(char) k
( *buf, ) p
(unsigned) k
( len, ) p
(int) k
( cookie\)) p n
({) N
(   ) S
(register) K
( ) p
(const) K
( ) p
(char) k
( *p = buf;) p n
(   ) S
(const) K
( ) p
(char) k
( *end = buf + len;) p n
() N
(   ) S
(while) K
( \(p < end\) ) p
(switch) K
( \(pjlchar\(*p++\)\)) p n
(   {) N
(      ) S
(case) K
( PJL_MSG_COOKIE:) p n
(         ) S
(if) K
( \(pjl_cookie != cookie\) ) p
(break) K
(; ) p
(// not our cookie, silently ignore) c n
(         ) p
(if) K
( \(pjlstate != PJL_STATE_INIT\) ) p
(break) K
(;) p n
(         pjlstate = PJL_STATE_SYNC;) N
(         logup\(DEBUG, ") S
(pjlinput: got ECHO %ld \(our cookie\), state %s -> %s) str
(",) p n
(               pjl_cookie, getpjlstatestr\(PJL_STATE_INIT\),) N
(                           getpjlstatestr\(pjlstate\)\);) N
(         ) S
(break) K
(;) p n
() N
(      ) S
(case) K
( PJL_MSG_PAGECOUNT:) p n
(         ) S
(if) K
( \(pjlstate >= PJL_STATE_SYNC && pjlstate < PJL_STATE_DONE\)) p n
(         {) N
(            ) S
(if) K
( \(pc1 < 0\) pc1 = pjl_pagecount; ) p
(// only once) c n
(            ) p
(else) K
( ) p
(if) K
( \(pjl_pagecount > pc2\) pc2 = pjl_pagecount;) p n
(            logup\(DEBUG, ") S
(pjlinput: got PAGECOUNT %ld in state %s, ) str
(") p n
(                         ") S
(pc1=%ld, pc2=%ld) str
(",) p n
(pracc-print.c) (Page 11/15) (Jan 01, 11 17:11) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(                  pjl_pagecount, getpjlstatestr\(pjlstate\), pc1, pc2\);) p n
(         }) N
(         ) S
(else) K n
(         {) p n
(            logup\(DEBUG, ") S
(pjlinput: got PAGECOUNT %ld in state %s, ignore) str
(",) p n
(                  pjl_pagecount, getpjlstatestr\(pjlstate\)\);) N
(         }) N
(         ) S
(break) K
(;) p n
() N
(      ) S
(case) K
( PJL_MSG_JOBSTART:) p n
(         ) S
(if) K
( \(\(pjlstate == PJL_STATE_SYNC\) && \(pjl_jobnum == cookie\)\)) p n
(         {) N
(            pjlstate = PJL_STATE_JOB;) N
() N
(            logup\(DEBUG, ") S
(pjlinput: got JOB %ld \(our cookie\), state %s -> %s) str
(",) p n
(                  pjl_jobnum, getpjlstatestr\(PJL_STATE_SYNC\),) N
(                              getpjlstatestr\(pjlstate\)\);) N
(         }) N
(         ) S
(else) K n
(         {) p n
(            ) S
(int) k
( ourcookie = pjl_jobnum == cookie;) p n
(            logup\(DEBUG, ") S
(pjlinput: got JOB %ld \(%s\) in state %s, ignore) str
(",) p n
(                  pjl_jobnum, ourcookie ? ") S
(our cookie) str
(" : ") p
(bad cookie) str
(",) p n
(                  getpjlstatestr\(pjlstate\)\);) N
(         }) N
(         ) S
(break) K
(;) p n
() N
(      ) S
(case) K
( PJL_MSG_JOBEND:) p n
(         ) S
(if) K
( \(\(pjlstate == PJL_STATE_JOB\) && \(pjl_jobnum == cookie\)\)) p n
(         {) N
(            pjlstate = PJL_STATE_EOJ;) N
(            pages = max\(pjl_numpages, pages\);) N
() N
(            logup\(DEBUG, ") S
(pjlinput: got EOJ %ld \(our cookie\) %ld, ) str
(") p n
(                         ") S
(state %s -> %s, pages=%ld) str
(",) p n
(                  pjl_jobnum, pjl_numpages,) N
(                  getpjlstatestr\(PJL_STATE_JOB\),) N
(                  getpjlstatestr\(pjlstate\), pages\);) N
(         }) N
(         ) S
(else) K n
(         {) p n
(            ) S
(int) k
( ourcookie = pjl_jobnum == cookie;) p n
(            logup\(DEBUG, ") S
(pjlinput: got EOJ %ld \(%s\) %ld in state %s, ignore) str
(",) p n
(                  pjl_jobnum, ourcookie ? ") S
(our cookie) str
(" : ") p
(bad cookie) str
(",) p n
(                  pjl_numpages, getpjlstatestr\(pjlstate\)\);) N
(         }) N
(         ) S
(break) K
(;) p n
() N
(      ) S
(case) K
( PJL_MSG_PAGE:) p n
(         ) S
(if) K
( \(pjlstate == PJL_STATE_JOB\)) p n
(         {) N
(            pages = max\(pjl_curpage, pages\);) N
(            logup\(DEBUG, ") S
(pjlinput: got PAGE %ld in state %s, pages=%ld) str
(",) p n
(                  pjl_curpage, getpjlstatestr\(pjlstate\), pages\);) N
(            logup\(INFO, ") S
(Printed page %d) str
(", pjl_curpage\);) p n
(         }) N
(         ) S
(else) K n
(         {) p n
(            logup\(DEBUG, ") S
(pjlinput: got PAGE %ld in state %s, ignore) str
(",) p n
(                  pjl_curpage, getpjlstatestr\(pjlstate\)\);) N
(         }) N
(         ) S
(break) K
(;) p n
(pracc-print.c) (Page 12/15) (Jan 01, 11 17:11) title
border
grestore
(Printed by Urs-Jakob) rhead
(pracc-print.c) (6/8) (Sunday April 10, 2011) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (13-14) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(   }) p n
(}) N
() N
(/*) c n
( * Write the given buffer to the given file descriptor in blocking) N
( * mode: do not return until all data has been written or an error) N
( * occurred.) N
( *) N
( * Use this function for sending small amounts of data to the printer) N
( * en bloc without bothering about the printer's asynchronous replies.) N
( * Careful: this could create a dead-lock \(no select-loop\)!) N
( *) N
( * Return 0 if OK or -1/errno if an error occurred.) N
( */) N
(int) k n
(writeall\() p
(int) k
( fd, ) p
(const) K
( ) p
(char) k
( *buf, ) p
(unsigned) k
( len\)) p n
({) N
(   ) S
(int) k
( ret;) p n
() N
(   ) S
(if) K
( \(fdblocking\(fd\) < 0\) ) p
(return) K
( -1; ) p
(// see errno) c n
() p n
(   ) S
(if) K
( \(writen\(fd, buf, len\) < 0\) ) p
(return) K
( -1; ) p
(// see errno) c n
() p n
(   ) S
(return) K
( 0; ) p
(// ok) c n
(}) p n
() N
(const) K
( ) p
(char) k
( *) p n
(getmodestr\() S
(int) k
( pcmode\)) p n
({) N
(   ) S
(switch) K
( \(pcmode\)) p n
(   {) N
(      ) S
(case) K
( PCMODE_OFF:        ) p
(return) K
( ") p
(OFF) str
(";) p n
(      ) S
(case) K
( PCMODE_POSTSCRIPT: ) p
(return) K
( ") p
(PS) str
(";) p n
(      ) S
(case) K
( PCMODE_PJL:        ) p
(return) K
( ") p
(PJL) str
(";) p n
(   }) N
() N
(   ) S
(return) K
( ") p
(UNKNOWN) str
(";) p n
(}) N
() N
(const) K
( ) p
(char) k
( *) p n
(getpjlstatestr\() S
(int) k
( pjlstate\)) p n
({) N
(   ) S
(switch) K
( \(pjlstate\)) p n
(   {) N
(      ) S
(case) K
( PJL_STATE_INIT:  ) p
(return) K
( ") p
(INIT) str
(";) p n
(      ) S
(case) K
( PJL_STATE_SYNC:  ) p
(return) K
( ") p
(SYNC) str
(";) p n
(      ) S
(case) K
( PJL_STATE_JOB:   ) p
(return) K
( ") p
(JOB) str
(";) p n
(      ) S
(case) K
( PJL_STATE_EOJ:   ) p
(return) K
( ") p
(EOJ) str
(";) p n
(      ) S
(case) K
( PJL_STATE_PC2:   ) p
(return) K
( ") p
(PC2) str
(";) p n
(      ) S
(case) K
( PJL_STATE_DONE:  ) p
(return) K
( ") p
(DONE) str
(";) p n
(   }) N
() N
(   ) S
(return) K
( ") p
(?) str
(";) p n
(}) N
() N
(/*) c n
( * On some special devices \(notably terminals, networks, streams\),) N
( * a write\(\) operation may return less than specified. This isn't) N
( * an error and we should continue with the remainder of the data.) N
( * This phenomenon never happens with ordinary disk files.) N
( *) N
( * See Stevens \(1993, p.406-408\) for details.) N
(pracc-print.c) (Page 13/15) (Jan 01, 11 17:11) title
border
/v 1 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( */) c n
(ssize_t) p n
(writen\() S
(int) k
( fd, ) p
(const) K
( ) p
(void) k
( *buf, size_t len\)) p n
({) N
(   size_t nbytes = len;) N
(   ) S
(char) k
( * bufptr = \() p
(char) k
( *\) buf;  ) p
(// no ptr arith with void star) c n
() p n
(   ) S
(while) K
( \(nbytes > 0\)) p n
(   {) N
(      ssize_t n = write\(fd, bufptr, nbytes\);) N
(      ) S
(if) K
( \(n <= 0\) ) p
(return) K
( -1; ) p
(// see errno) c n
(      nbytes -= n;) p n
(      bufptr += n;) N
(   }) N
() N
(   ) S
(return) K
( len;) p n
(}) N
() N
(/*) c n
( * These two functions take a descriptor of an open file \(or pipe,) N
( * socket, etc\) and set/clear the O_NONBLOCK bit in the status flags.) N
( * Return -1 on error, some other value if ok.) N
( */) N
() p n
(#ifndef) K
( O_NONBLOCK) p n
(#error) K
( Your system headers ) p
(do) K
( not define O_NONBLOCK.) p n
(#endif) K n
() p n
(int) k n
(fdblocking\() p
(int) k
( fd\)) p n
({) N
(   ) S
(return) K
( fcntl\(fd, F_SETFL, fcntl\(fd, F_GETFL, 0\) & ~O_NONBLOCK\);) p n
(}) N
() N
(int) k n
(fdnonblock\() p
(int) k
( fd\)) p n
({) N
(   ) S
(return) K
( fcntl\(fd, F_SETFL, fcntl\(fd, F_GETFL, 0\) | O_NONBLOCK\);) p n
(}) N
() N
(/*) c n
( * Get the program name: the basename of the first) N
( * entry in argv, the array of command line arguments.) N
( *) N
( * Return pointer to progname or NULL if no such argument.) N
( */) N
(char) k
( *) p n
(progname\() S
(char) k
( **argv\)) p n
({) N
(   ) S
(const) K
( ) p
(char) k
( *s = 0;) p n
(   ) S
(register) K
( ) p
(const) K
( ) p
(char) k
( *p;) p n
() N
(   ) S
(if) K
( \(argv && *argv\)) p n
(   {) N
(      ) S
(// make s point to one after the last slash in argv[0]:) c n
(      p = s = *argv;) p n
(      ) S
(while) K
( \(*p\) ) p
(if) K
( \(*p++ == ') p
(/) str
('\) ) p
(if) K
( \(p\) s = p; ) p
(// advance) c n
(   }) p n
() N
(   ) S
(return) K
( \() p
(char) k
( *\) s;) p n
(}) N
() N
(pracc-print.c) (Page 14/15) (Jan 01, 11 17:11) title
border
grestore
(Printed by Urs-Jakob) rhead
(pracc-print.c) (7/8) (Sunday April 10, 2011) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (15) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.362408 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(void) k n
(logup\() p
(int) k
( level, ) p
(const) K
( ) p
(char) k
( *fmt, ...\)) p n
({) N
(   va_list ap;) N
(   ) S
(char) k
( prefix;) p n
() N
(   va_start\(ap, fmt\);) N
() N
(   ) S
(if) K
( \(level < loglevel\) ) p
(return) K
(;) p n
() N
(   ) S
(// Ugly, but better safe than sorry:) c n
(   ) p
(// Be sure we don't get an array index out of bounds below!) c n
() p n
(   assert\(DEBUG == 0\);) N
(   assert\(FATAL == 4\);) N
() N
(   ) S
(if) K
( \(level < DEBUG\) level = DEBUG;) p n
(   ) S
(if) K
( \(level > FATAL\) level = FATAL;) p n
() N
(   prefix = ") S
(DIWEF) str
("[level];) p n
() N
(   fprintf\(stderr, ") S
(%c: ) str
(", prefix\);) p n
(   vfprintf\(stderr, fmt, ap\);) N
(   fprintf\(stderr, ") S
(\\n) str
("\);) p n
() N
(   va_end\(ap\);) N
(}) N
() N
(void) k n
(die\() p
(int) k
( code, ) p
(const) K
( ) p
(char) k
( *fmt, ...\)) p n
({) N
(   ) S
(char) k
( msg[256];) p n
(   ) S
(int) k
( saverr = errno;) p n
() N
(   va_list ap;) N
(   va_start\(ap, fmt\);) N
() N
(   vsnprintf\(msg, ) S
(sizeof) K
(\(msg\), fmt, ap\);) p n
() N
(   ) S
(if) K
( \(saverr == 0\) logup\(FATAL, ") p
(%s) str
(", msg\);) p n
(   ) S
(else) K
( logup\(FATAL, ") p
(%s: %s) str
(", msg, strerror\(errno\)\);) p n
(   ) N
(   va_end\(ap\);) N
() N
(   exit\(code\);) N
(}) N
(pracc-print.c) (Page 15/15) (Jan 01, 11 17:11) title
border
grestore
(Printed by Urs-Jakob) rhead
(pracc-print.c) (8/8) (Sunday April 10, 2011) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
